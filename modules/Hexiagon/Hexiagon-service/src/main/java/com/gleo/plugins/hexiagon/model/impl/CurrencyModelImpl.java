/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gleo.plugins.hexiagon.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.gleo.plugins.hexiagon.model.Currency;
import com.gleo.plugins.hexiagon.model.CurrencyModel;
import com.gleo.plugins.hexiagon.model.CurrencySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Currency service. Represents a row in the &quot;Hexiagon_Currency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CurrencyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CurrencyImpl}.
 * </p>
 *
 * @author guillaumelenoir
 * @see CurrencyImpl
 * @see Currency
 * @see CurrencyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CurrencyModelImpl extends BaseModelImpl<Currency>
	implements CurrencyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a currency model instance should use the {@link Currency} interface instead.
	 */
	public static final String TABLE_NAME = "Hexiagon_Currency";
	public static final Object[][] TABLE_COLUMNS = {
			{ "currencyId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "label", Types.VARCHAR },
			{ "symbol", Types.VARCHAR },
			{ "order_", Types.INTEGER },
			{ "countryId", Types.BIGINT },
			{ "rate", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("currencyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("label", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("symbol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rate", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table Hexiagon_Currency (currencyId LONG not null primary key,companyId LONG,label VARCHAR(75) null,symbol VARCHAR(75) null,order_ INTEGER,countryId LONG,rate LONG)";
	public static final String TABLE_SQL_DROP = "drop table Hexiagon_Currency";
	public static final String ORDER_BY_JPQL = " ORDER BY currency.order DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Hexiagon_Currency.order_ DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.gleo.plugins.hexiagon.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.gleo.plugins.hexiagon.model.Currency"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.gleo.plugins.hexiagon.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.gleo.plugins.hexiagon.model.Currency"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.gleo.plugins.hexiagon.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.gleo.plugins.hexiagon.model.Currency"),
			true);
	public static final long COUNTRYID_COLUMN_BITMASK = 1L;
	public static final long ORDER_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Currency toModel(CurrencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Currency model = new CurrencyImpl();

		model.setCurrencyId(soapModel.getCurrencyId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setLabel(soapModel.getLabel());
		model.setSymbol(soapModel.getSymbol());
		model.setOrder(soapModel.getOrder());
		model.setCountryId(soapModel.getCountryId());
		model.setRate(soapModel.getRate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Currency> toModels(CurrencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Currency> models = new ArrayList<Currency>(soapModels.length);

		for (CurrencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.gleo.plugins.hexiagon.service.util.PropsUtil.get(
				"lock.expiration.time.com.gleo.plugins.hexiagon.model.Currency"));

	public CurrencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCurrencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Currency.class;
	}

	@Override
	public String getModelClassName() {
		return Currency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("currencyId", getCurrencyId());
		attributes.put("companyId", getCompanyId());
		attributes.put("label", getLabel());
		attributes.put("symbol", getSymbol());
		attributes.put("order", getOrder());
		attributes.put("countryId", getCountryId());
		attributes.put("rate", getRate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long currencyId = (Long)attributes.get("currencyId");

		if (currencyId != null) {
			setCurrencyId(currencyId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String label = (String)attributes.get("label");

		if (label != null) {
			setLabel(label);
		}

		String symbol = (String)attributes.get("symbol");

		if (symbol != null) {
			setSymbol(symbol);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		Long rate = (Long)attributes.get("rate");

		if (rate != null) {
			setRate(rate);
		}
	}

	@JSON
	@Override
	public long getCurrencyId() {
		return _currencyId;
	}

	@Override
	public void setCurrencyId(long currencyId) {
		_currencyId = currencyId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getLabel() {
		if (_label == null) {
			return StringPool.BLANK;
		}
		else {
			return _label;
		}
	}

	@Override
	public void setLabel(String label) {
		_label = label;
	}

	@JSON
	@Override
	public String getSymbol() {
		if (_symbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _symbol;
		}
	}

	@Override
	public void setSymbol(String symbol) {
		_symbol = symbol;
	}

	@JSON
	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		_columnBitmask = -1L;

		_order = order;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_columnBitmask |= COUNTRYID_COLUMN_BITMASK;

		if (!_setOriginalCountryId) {
			_setOriginalCountryId = true;

			_originalCountryId = _countryId;
		}

		_countryId = countryId;
	}

	public long getOriginalCountryId() {
		return _originalCountryId;
	}

	@JSON
	@Override
	public long getRate() {
		return _rate;
	}

	@Override
	public void setRate(long rate) {
		_rate = rate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Currency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Currency toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Currency)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CurrencyImpl currencyImpl = new CurrencyImpl();

		currencyImpl.setCurrencyId(getCurrencyId());
		currencyImpl.setCompanyId(getCompanyId());
		currencyImpl.setLabel(getLabel());
		currencyImpl.setSymbol(getSymbol());
		currencyImpl.setOrder(getOrder());
		currencyImpl.setCountryId(getCountryId());
		currencyImpl.setRate(getRate());

		currencyImpl.resetOriginalValues();

		return currencyImpl;
	}

	@Override
	public int compareTo(Currency currency) {
		int value = 0;

		if (getOrder() < currency.getOrder()) {
			value = -1;
		}
		else if (getOrder() > currency.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Currency)) {
			return false;
		}

		Currency currency = (Currency)obj;

		long primaryKey = currency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CurrencyModelImpl currencyModelImpl = this;

		currencyModelImpl._originalCountryId = currencyModelImpl._countryId;

		currencyModelImpl._setOriginalCountryId = false;

		currencyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Currency> toCacheModel() {
		CurrencyCacheModel currencyCacheModel = new CurrencyCacheModel();

		currencyCacheModel.currencyId = getCurrencyId();

		currencyCacheModel.companyId = getCompanyId();

		currencyCacheModel.label = getLabel();

		String label = currencyCacheModel.label;

		if ((label != null) && (label.length() == 0)) {
			currencyCacheModel.label = null;
		}

		currencyCacheModel.symbol = getSymbol();

		String symbol = currencyCacheModel.symbol;

		if ((symbol != null) && (symbol.length() == 0)) {
			currencyCacheModel.symbol = null;
		}

		currencyCacheModel.order = getOrder();

		currencyCacheModel.countryId = getCountryId();

		currencyCacheModel.rate = getRate();

		return currencyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{currencyId=");
		sb.append(getCurrencyId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", label=");
		sb.append(getLabel());
		sb.append(", symbol=");
		sb.append(getSymbol());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", rate=");
		sb.append(getRate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.gleo.plugins.hexiagon.model.Currency");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>currencyId</column-name><column-value><![CDATA[");
		sb.append(getCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>label</column-name><column-value><![CDATA[");
		sb.append(getLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symbol</column-name><column-value><![CDATA[");
		sb.append(getSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rate</column-name><column-value><![CDATA[");
		sb.append(getRate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Currency.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Currency.class
		};
	private long _currencyId;
	private long _companyId;
	private String _label;
	private String _symbol;
	private int _order;
	private long _countryId;
	private long _originalCountryId;
	private boolean _setOriginalCountryId;
	private long _rate;
	private long _columnBitmask;
	private Currency _escapedModel;
}