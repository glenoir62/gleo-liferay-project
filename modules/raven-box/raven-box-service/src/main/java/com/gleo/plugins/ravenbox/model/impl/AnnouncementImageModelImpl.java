/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gleo.plugins.ravenbox.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.gleo.plugins.ravenbox.model.AnnouncementImage;
import com.gleo.plugins.ravenbox.model.AnnouncementImageModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the AnnouncementImage service. Represents a row in the &quot;ravenbox_AnnouncementImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AnnouncementImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnnouncementImageImpl}.
 * </p>
 *
 * @author Guillaume Lenoir
 * @see AnnouncementImageImpl
 * @see AnnouncementImage
 * @see AnnouncementImageModel
 * @generated
 */
@ProviderType
public class AnnouncementImageModelImpl extends BaseModelImpl<AnnouncementImage>
	implements AnnouncementImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a announcement image model instance should use the {@link AnnouncementImage} interface instead.
	 */
	public static final String TABLE_NAME = "ravenbox_AnnouncementImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "announcementImageId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "announcementId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "order_", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("announcementImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("announcementId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table ravenbox_AnnouncementImage (announcementImageId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,announcementId LONG,fileEntryId LONG,description STRING null,order_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ravenbox_AnnouncementImage";
	public static final String ORDER_BY_JPQL = " ORDER BY announcementImage.order ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ravenbox_AnnouncementImage.order_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.gleo.ravenbox.web.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.gleo.plugins.ravenbox.model.AnnouncementImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.gleo.ravenbox.web.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.gleo.plugins.ravenbox.model.AnnouncementImage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.gleo.ravenbox.web.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.gleo.plugins.ravenbox.model.AnnouncementImage"),
			true);
	public static final long ANNOUNCEMENTID_COLUMN_BITMASK = 1L;
	public static final long ORDER_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.gleo.ravenbox.web.service.util.PropsUtil.get(
				"lock.expiration.time.com.gleo.plugins.ravenbox.model.AnnouncementImage"));

	public AnnouncementImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _announcementImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnnouncementImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _announcementImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnnouncementImage.class;
	}

	@Override
	public String getModelClassName() {
		return AnnouncementImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("announcementImageId", getAnnouncementImageId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("announcementId", getAnnouncementId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("description", getDescription());
		attributes.put("order", getOrder());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long announcementImageId = (Long)attributes.get("announcementImageId");

		if (announcementImageId != null) {
			setAnnouncementImageId(announcementImageId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long announcementId = (Long)attributes.get("announcementId");

		if (announcementId != null) {
			setAnnouncementId(announcementId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}
	}

	@Override
	public long getAnnouncementImageId() {
		return _announcementImageId;
	}

	@Override
	public void setAnnouncementImageId(long announcementImageId) {
		_announcementImageId = announcementImageId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public long getAnnouncementId() {
		return _announcementId;
	}

	@Override
	public void setAnnouncementId(long announcementId) {
		_columnBitmask |= ANNOUNCEMENTID_COLUMN_BITMASK;

		if (!_setOriginalAnnouncementId) {
			_setOriginalAnnouncementId = true;

			_originalAnnouncementId = _announcementId;
		}

		_announcementId = announcementId;
	}

	public long getOriginalAnnouncementId() {
		return _originalAnnouncementId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		_columnBitmask = -1L;

		if (!_setOriginalOrder) {
			_setOriginalOrder = true;

			_originalOrder = _order;
		}

		_order = order;
	}

	public int getOriginalOrder() {
		return _originalOrder;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AnnouncementImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(AnnouncementImage.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public AnnouncementImage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AnnouncementImage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnnouncementImageImpl announcementImageImpl = new AnnouncementImageImpl();

		announcementImageImpl.setAnnouncementImageId(getAnnouncementImageId());
		announcementImageImpl.setCompanyId(getCompanyId());
		announcementImageImpl.setGroupId(getGroupId());
		announcementImageImpl.setUserId(getUserId());
		announcementImageImpl.setAnnouncementId(getAnnouncementId());
		announcementImageImpl.setFileEntryId(getFileEntryId());
		announcementImageImpl.setDescription(getDescription());
		announcementImageImpl.setOrder(getOrder());

		announcementImageImpl.resetOriginalValues();

		return announcementImageImpl;
	}

	@Override
	public int compareTo(AnnouncementImage announcementImage) {
		int value = 0;

		if (getOrder() < announcementImage.getOrder()) {
			value = -1;
		}
		else if (getOrder() > announcementImage.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AnnouncementImage)) {
			return false;
		}

		AnnouncementImage announcementImage = (AnnouncementImage)obj;

		long primaryKey = announcementImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AnnouncementImageModelImpl announcementImageModelImpl = this;

		announcementImageModelImpl._originalAnnouncementId = announcementImageModelImpl._announcementId;

		announcementImageModelImpl._setOriginalAnnouncementId = false;

		announcementImageModelImpl._originalOrder = announcementImageModelImpl._order;

		announcementImageModelImpl._setOriginalOrder = false;

		announcementImageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnnouncementImage> toCacheModel() {
		AnnouncementImageCacheModel announcementImageCacheModel = new AnnouncementImageCacheModel();

		announcementImageCacheModel.announcementImageId = getAnnouncementImageId();

		announcementImageCacheModel.companyId = getCompanyId();

		announcementImageCacheModel.groupId = getGroupId();

		announcementImageCacheModel.userId = getUserId();

		announcementImageCacheModel.announcementId = getAnnouncementId();

		announcementImageCacheModel.fileEntryId = getFileEntryId();

		announcementImageCacheModel.description = getDescription();

		String description = announcementImageCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			announcementImageCacheModel.description = null;
		}

		announcementImageCacheModel.order = getOrder();

		return announcementImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{announcementImageId=");
		sb.append(getAnnouncementImageId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", announcementId=");
		sb.append(getAnnouncementId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.gleo.plugins.ravenbox.model.AnnouncementImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>announcementImageId</column-name><column-value><![CDATA[");
		sb.append(getAnnouncementImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>announcementId</column-name><column-value><![CDATA[");
		sb.append(getAnnouncementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AnnouncementImage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AnnouncementImage.class
		};
	private long _announcementImageId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private long _announcementId;
	private long _originalAnnouncementId;
	private boolean _setOriginalAnnouncementId;
	private long _fileEntryId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private int _order;
	private int _originalOrder;
	private boolean _setOriginalOrder;
	private long _columnBitmask;
	private AnnouncementImage _escapedModel;
}