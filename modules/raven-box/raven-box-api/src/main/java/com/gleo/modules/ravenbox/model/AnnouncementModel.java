/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gleo.modules.ravenbox.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Announcement service. Represents a row in the &quot;ravenbox_Announcement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.gleo.modules.ravenbox.model.impl.AnnouncementModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.gleo.modules.ravenbox.model.impl.AnnouncementImpl}.
 * </p>
 *
 * @author Guillaume Lenoir
 * @see Announcement
 * @see com.gleo.modules.ravenbox.model.impl.AnnouncementImpl
 * @see com.gleo.modules.ravenbox.model.impl.AnnouncementModelImpl
 * @generated
 */
@ProviderType
public interface AnnouncementModel extends BaseModel<Announcement>, GroupedModel,
	LocalizedModel, ShardedModel, StagedAuditedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a announcement model instance should use the {@link Announcement} interface instead.
	 */

	/**
	 * Returns the primary key of this announcement.
	 *
	 * @return the primary key of this announcement
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this announcement.
	 *
	 * @param primaryKey the primary key of this announcement
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this announcement.
	 *
	 * @return the uuid of this announcement
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this announcement.
	 *
	 * @param uuid the uuid of this announcement
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the announcement ID of this announcement.
	 *
	 * @return the announcement ID of this announcement
	 */
	public long getAnnouncementId();

	/**
	 * Sets the announcement ID of this announcement.
	 *
	 * @param announcementId the announcement ID of this announcement
	 */
	public void setAnnouncementId(long announcementId);

	/**
	 * Returns the company ID of this announcement.
	 *
	 * @return the company ID of this announcement
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this announcement.
	 *
	 * @param companyId the company ID of this announcement
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this announcement.
	 *
	 * @return the group ID of this announcement
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this announcement.
	 *
	 * @param groupId the group ID of this announcement
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this announcement.
	 *
	 * @return the user ID of this announcement
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this announcement.
	 *
	 * @param userId the user ID of this announcement
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this announcement.
	 *
	 * @return the user uuid of this announcement
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this announcement.
	 *
	 * @param userUuid the user uuid of this announcement
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the type ID of this announcement.
	 *
	 * @return the type ID of this announcement
	 */
	public long getTypeId();

	/**
	 * Sets the type ID of this announcement.
	 *
	 * @param typeId the type ID of this announcement
	 */
	public void setTypeId(long typeId);

	/**
	 * Returns the folder ID of this announcement.
	 *
	 * @return the folder ID of this announcement
	 */
	public long getFolderId();

	/**
	 * Sets the folder ID of this announcement.
	 *
	 * @param folderId the folder ID of this announcement
	 */
	public void setFolderId(long folderId);

	/**
	 * Returns the user name of this announcement.
	 *
	 * @return the user name of this announcement
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this announcement.
	 *
	 * @param userName the user name of this announcement
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this announcement.
	 *
	 * @return the create date of this announcement
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this announcement.
	 *
	 * @param createDate the create date of this announcement
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this announcement.
	 *
	 * @return the modified date of this announcement
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this announcement.
	 *
	 * @param modifiedDate the modified date of this announcement
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the currency ID of this announcement.
	 *
	 * @return the currency ID of this announcement
	 */
	public long getCurrencyId();

	/**
	 * Sets the currency ID of this announcement.
	 *
	 * @param currencyId the currency ID of this announcement
	 */
	public void setCurrencyId(long currencyId);

	/**
	 * Returns the title of this announcement.
	 *
	 * @return the title of this announcement
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this announcement in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this announcement
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this announcement in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this announcement. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this announcement in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this announcement
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this announcement in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this announcement
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this announcement.
	 *
	 * @return the locales and localized titles of this announcement
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this announcement.
	 *
	 * @param title the title of this announcement
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this announcement in the language.
	 *
	 * @param title the localized title of this announcement
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this announcement in the language, and sets the default locale.
	 *
	 * @param title the localized title of this announcement
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this announcement from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this announcement
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this announcement from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this announcement
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the email address of this announcement.
	 *
	 * @return the email address of this announcement
	 */
	@AutoEscape
	public String getEmailAddress();

	/**
	 * Sets the email address of this announcement.
	 *
	 * @param emailAddress the email address of this announcement
	 */
	public void setEmailAddress(String emailAddress);

	/**
	 * Returns the phone number of this announcement.
	 *
	 * @return the phone number of this announcement
	 */
	@AutoEscape
	public String getPhoneNumber();

	/**
	 * Sets the phone number of this announcement.
	 *
	 * @param phoneNumber the phone number of this announcement
	 */
	public void setPhoneNumber(String phoneNumber);

	/**
	 * Returns the price of this announcement.
	 *
	 * @return the price of this announcement
	 */
	public long getPrice();

	/**
	 * Sets the price of this announcement.
	 *
	 * @param price the price of this announcement
	 */
	public void setPrice(long price);

	/**
	 * Returns the content of this announcement.
	 *
	 * @return the content of this announcement
	 */
	public String getContent();

	/**
	 * Returns the localized content of this announcement in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content of this announcement
	 */
	@AutoEscape
	public String getContent(Locale locale);

	/**
	 * Returns the localized content of this announcement in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this announcement. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContent(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content of this announcement in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content of this announcement
	 */
	@AutoEscape
	public String getContent(String languageId);

	/**
	 * Returns the localized content of this announcement in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this announcement
	 */
	@AutoEscape
	public String getContent(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentCurrentLanguageId();

	@AutoEscape
	public String getContentCurrentValue();

	/**
	 * Returns a map of the locales and localized contents of this announcement.
	 *
	 * @return the locales and localized contents of this announcement
	 */
	public Map<Locale, String> getContentMap();

	/**
	 * Sets the content of this announcement.
	 *
	 * @param content the content of this announcement
	 */
	public void setContent(String content);

	/**
	 * Sets the localized content of this announcement in the language.
	 *
	 * @param content the localized content of this announcement
	 * @param locale the locale of the language
	 */
	public void setContent(String content, Locale locale);

	/**
	 * Sets the localized content of this announcement in the language, and sets the default locale.
	 *
	 * @param content the localized content of this announcement
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContent(String content, Locale locale, Locale defaultLocale);

	public void setContentCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contents of this announcement from the map of locales and localized contents.
	 *
	 * @param contentMap the locales and localized contents of this announcement
	 */
	public void setContentMap(Map<Locale, String> contentMap);

	/**
	 * Sets the localized contents of this announcement from the map of locales and localized contents, and sets the default locale.
	 *
	 * @param contentMap the locales and localized contents of this announcement
	 * @param defaultLocale the default locale
	 */
	public void setContentMap(Map<Locale, String> contentMap,
		Locale defaultLocale);

	/**
	 * Returns the status of this announcement.
	 *
	 * @return the status of this announcement
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this announcement.
	 *
	 * @param status the status of this announcement
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this announcement.
	 *
	 * @return the status by user ID of this announcement
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this announcement.
	 *
	 * @param statusByUserId the status by user ID of this announcement
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this announcement.
	 *
	 * @return the status by user uuid of this announcement
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this announcement.
	 *
	 * @param statusByUserUuid the status by user uuid of this announcement
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this announcement.
	 *
	 * @return the status by user name of this announcement
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this announcement.
	 *
	 * @param statusByUserName the status by user name of this announcement
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this announcement.
	 *
	 * @return the status date of this announcement
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this announcement.
	 *
	 * @param statusDate the status date of this announcement
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the country ID of this announcement.
	 *
	 * @return the country ID of this announcement
	 */
	public long getCountryId();

	/**
	 * Sets the country ID of this announcement.
	 *
	 * @param countryId the country ID of this announcement
	 */
	public void setCountryId(long countryId);

	/**
	 * Returns the region ID of this announcement.
	 *
	 * @return the region ID of this announcement
	 */
	public long getRegionId();

	/**
	 * Sets the region ID of this announcement.
	 *
	 * @param regionId the region ID of this announcement
	 */
	public void setRegionId(long regionId);

	/**
	 * Returns the city of this announcement.
	 *
	 * @return the city of this announcement
	 */
	@AutoEscape
	public String getCity();

	/**
	 * Sets the city of this announcement.
	 *
	 * @param city the city of this announcement
	 */
	public void setCity(String city);

	/**
	 * Returns the site of this announcement.
	 *
	 * @return the site of this announcement
	 */
	@AutoEscape
	public String getSite();

	/**
	 * Sets the site of this announcement.
	 *
	 * @param site the site of this announcement
	 */
	public void setSite(String site);

	/**
	 * Returns the building of this announcement.
	 *
	 * @return the building of this announcement
	 */
	@AutoEscape
	public String getBuilding();

	/**
	 * Sets the building of this announcement.
	 *
	 * @param building the building of this announcement
	 */
	public void setBuilding(String building);

	/**
	 * Returns <code>true</code> if this announcement is approved.
	 *
	 * @return <code>true</code> if this announcement is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this announcement is denied.
	 *
	 * @return <code>true</code> if this announcement is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this announcement is a draft.
	 *
	 * @return <code>true</code> if this announcement is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this announcement is expired.
	 *
	 * @return <code>true</code> if this announcement is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this announcement is inactive.
	 *
	 * @return <code>true</code> if this announcement is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this announcement is incomplete.
	 *
	 * @return <code>true</code> if this announcement is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this announcement is pending.
	 *
	 * @return <code>true</code> if this announcement is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this announcement is scheduled.
	 *
	 * @return <code>true</code> if this announcement is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(Announcement announcement);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Announcement> toCacheModel();

	@Override
	public Announcement toEscapedModel();

	@Override
	public Announcement toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}